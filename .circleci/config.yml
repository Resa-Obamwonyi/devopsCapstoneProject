version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3  
  aws-eks: circleci/aws-eks@2.2.0  
  kubernetes: circleci/kubernetes@0.4.0

jobs:
  setup-run-lint:
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: install dependenices and run linting for blue app
          command: |
            cd blue
            make install
            make lint

      - run:
          name: install dependenices and run linting for green app
          command: |
            cd green
            make install
            make lint
  
  build-docker-images:
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build blue_app container
          command: |
            cd blue
            docker build -t capstone_blueapp .
            ./upload_docker.sh "$DOCKERHUB_PASSWORD"

      - run:
          name: Build green_app container
          command: |
            cd green
            docker build -t capstone_greenapp .
            ./upload_docker.sh "$DOCKERHUB_PASSWORD"
 
  create-cluster:
      docker:
        - image: circleci/node:13.8.0
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - checkout
        - run:
            name: Install the eksctl tool
            command: |
              mkdir -p eksctl_download
              curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
                | tar xz -C eksctl_download
              chmod +x eksctl_download/eksctl
              sudo mv eksctl_download/eksctl /usr/local/bin/
              rmdir eksctl_download
              
        - aws-eks/create-cluster:
            cluster-name: << parameters.cluster-name >>
            tags: 
              - zones=us-east-1a,us-east-1b,us-east-1c

  test-cluster:
      docker:
        - image: circleci/node:13.8.0
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - checkout
        - kubernetes/install:
            kubectl-version: v1.25.0
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
        - kubernetes/create-or-update-resource:
            resource-file-path: ./blue-green-service.json
            resource-name: service/blue-green-loadbalancer
        - run:
            name: Deploy blue app in cluster
            command: |
              cd blue
              kubectl cluster-info
              chmod +x run_kubernetes.sh
              ./run_kubernetes.sh
        - run:
            name: Confirm blue app is in cluster
            command: |
              sleep 60 && kubectl get all && sleep 60
        - run:
            name: Deploy green app in cluster
            command: |
              cd green
              chmod +x run_kubernetes.sh
              ./run_kubernetes.sh
        - run:
            name: Confirm green app is in cluster
            command: |
              sleep 60 && kubectl get all && sleep 60

  # delete-cluster:
  #     docker:
  #       - image: circleci/node:13.8.0
  #     parameters:
  #       cluster-name:
  #         description: |
  #           Name of the EKS cluster
  #         type: string
  #     steps:
  #       - run:
  #           name: Install the eksctl tool
  #           command: |
  #             mkdir -p eksctl_download
  #             curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
  #               | tar xz -C eksctl_download
  #             chmod +x eksctl_download/eksctl
  #             sudo mv eksctl_download/eksctl /usr/local/bin/
  #             rmdir eksctl_download
  #       - aws-eks/delete-cluster:
  #           cluster-name: << parameters.cluster-name >>

workflows:
  default:
    jobs:
      - setup-run-lint

      - build-docker-images:
          requires:
            - setup-run-lint

      - create-cluster:
          cluster-name: capstone-deploy-${CIRCLE_WORKFLOW_ID:0:7}
          requires:
            - build-docker-images

      - test-cluster:
          cluster-name: capstone-deploy-${CIRCLE_WORKFLOW_ID:0:7}
          requires:
            - create-cluster

      # - delete-cluster:
      #     cluster-name: capstone-deploy-${CIRCLE_WORKFLOW_ID:0:7}
      #     requires:
      #       - test-cluster