version: 2.1

commands:
  destroy-environment:
    description: Destroy cloudformation stack given a workflow ID, after a failed deployment.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name quizapp-${CIRCLE_WORKFLOW_ID:0:7}
              aws s3 rb s3://quizapp-${CIRCLE_WORKFLOW_ID:0:7} --force

jobs:
# Use cloudformation to build a kubernetes cluster
  build-app:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build quiz app
          command: |
            cd app
            npm install
            npm run build #incorrect

# build cluster

# initialize cluster

# deploy pipeline

# test and run lint
    test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Run lint Test
            command: |
              cd app
              npm install
              # run lint
    
    deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
              name: Ensure back-end infrastructure exists
              command: |
                aws cloudformation deploy --template-file .circleci/files/backend.yml \
                --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
                --tags project=udapeople
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
        - run:
            name: Add back-end ip to ansible inventory
            command: |
                aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
                cat ~/project/.circleci/ansible/inventory.txt
              
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - destroy-environment

    configure-infrastructure:
      docker:
        - image: python:3.11-rc-alpine
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["c0:3d:3a:dd:98:45:b0:ae:1e:20:f3:82:de:b4:26:58"] 
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
                apk add --update ansible
        - run:
            name: Configure server
            command: |
                cd .circleci/ansible
                ansible-playbook -i inventory.txt configure-server.yml
        - destroy-environment    
  
    deploy-frontend:
      docker:
        - image: python:3.11-rc-alpine
      steps:
        - checkout
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
                apk add --update curl aws-cli tar gzip nodejs npm
                apk add --update npm
        - run:
            name: Get backend url
            command: |
                export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
                export API_URL="http://${BACKEND_IP}:3030"
                echo "${API_URL}"
                echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                cat frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
                cd frontend
                npm install
                npm run build
                tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

        - destroy-environment
        - revert-migrations

  smoke-test:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              apk add --update curl aws-cli tar gzip nodejs npm
              apk add --update npm
              apk add --update ansible
      - run:
          name: Backend smoke test.
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
              echo "${BACKEND_IP}"
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                return 0
              else
                return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                return 0
              else
                return 1
              fi

      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      - destroy-environment
      - revert-migrations
# initialize k8 cluster using ansible or cloudformation

workflows:
  quiz-app:
    jobs:
      - build-app
      - test-app:
          requires: [build-app]
      - deploy-infrastructure:
          requires: [test-app]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
         requires: [smoke-test]